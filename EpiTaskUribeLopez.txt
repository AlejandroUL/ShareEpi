mkdir data 
mkdir analyses


download files
../bin/download.metadata.sh https://www.encodeproject.org/metadata/?replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&status=submitted&status=in+progress&biosample_ontology.term_name=stomach&biosample_ontology.term_name=sigmoid+colon&assay_title=ATAC-seq&assay_slims=DNA+accessibility&type=Experiment


mkdir data/bed.files


cut -f1 analyses/bigBed.peaks.ids.txt |\
while read filename; do
  bigBedToBed data/bigBed.files/"$filename".bigBed data/bed.files/"$filename".bed
done


cut -f-2 analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do 
  bedtools intersect -a annotation/gencode.v24.protein.coding.non.redundant.TSS.bed -b data/bed.files/"$filename".bed -u |\
  cut -f7 |\
  sort -u > analyses/peaks.analysis/genes.with.peaks."$tissue".H3K4me3.txt
done

cut -f-2 analyses/bigBed.peaks.ids.txt |\
while read filename tissue; do 
      bedtools intersect -wa -a data/bed.files/"$filename".bed -b ../ChIP-seq/annotation/gencode.v24.protein.coding.non.redundant.TSS.bed |\
        sort -u > analyses/peaks.promoters."$tissue".ATAC.bed
done

head analyses/peaks.promoters.sigmoid_colon.ATAC.bed

wc -l analyses/*.bed
  47871 analyses/peaks.promoters.sigmoid_colon.ATAC.bed
  44749 analyses/peaks.promoters.stomach.ATAC.bed
  92620 total

cut -f-2 analyses/bigBed.peaks.ids.txt |while read filename tissue; do bedtools
intersect -b ../ChIP-seq/annotation/gencode.v24.protein.coding.gene.body.bed -a
data/bed.files/"$filename".bed -v > analyses/peaksoutsidegene"$tissue".bed; done

cut -f-2 analyses/bigBed.peaks.ids.txt |while read filename tissue; do bedtools intersect -b ../ChIP-seq/annotation/gencode.v24.protein.coding.gene.body.bed -a data/bed.files/"$filename".bed -v > analyses/outsidepeaks."$tissue".bed; done
wc -l  analyses/outsidepeaks*
  37035 analyses/outsidepeaks.sigmoid_colon.bed
  34537 analyses/outsidepeaks.stomach.bed
  71572 total



##########################################################################
##########################################################################
##########################################################################

TASK 5


Task 1: Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results.


mkdir regulatory_elements 
cd regulatory_elements


# Task 2: 
## Distal regulatory regions are usually found to be flanked by both H3K27ac and H3K4me1. From your starting catalogue of open regions in each tissue, select those that overlap peaks of H3K27ac AND H3K4me1 in the corresponding tissue. You will get a list of candidate distal regulatory elements for each tissue. How many are they?

### create the directories 

mkdir H3K27peaks
mkdir H3K4peaks

### Then create the bed files with H3K27ac and H3K4me1 using the Chip-seq data

### create a file with the ids

grep -F H3K27ac ../ChIP-seq/metadata.tsv |  grep -F "bigBed_narrowPeak" | grep -F "pseudoreplicated_peaks" |grep -F "GRCh38" |awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |sort -k2,2 -k1,1r |sort -k2,2 -u > H3K27peaks/bigBed.peaksH3K27ac.ids.txt

grep -F H3K4me1 ../ChIP-seq/metadata.tsv |  grep -F "bigBed_narrowPeak" | grep -F "pseudoreplicated_peaks" |grep -F "GRCh38" |awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |sort -k2,2 -k1,1r |sort -k2,2 -u > H3K4peaks/bigBed.peaksH3K4me1.ids.txt


### download bigbed files

cut -f1 H3K4peaks/bigBed.peaksH3K4me1.ids.txt |\
while read filename; do
  wget -P H3K4peaks "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

cut -f1 H3K27peaks/bigBed.peaksH3K27ac.ids.txt |\
while read filename; do
  wget -P H3K27peaks "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
done

### To make the intersect convert them into .bed 

cut -f1 H3K4peaks/bigBed.peaksH3K4me1.ids.txt |while read filename; do   bigBedToBed H3K4peaks/"$filename".bigBed H3K4peaks/"$filename".bed; done
cut -f1 H3K27peaks/bigBed.peaksH3K27ac.ids.txt |while read filename; do   bigBedToBed H3K27peaks/"$filename".bigBed H3K27peaks/"$filename".bed; done

### Now intersect peaks found outside the gene body in each tissue 

bedtools intersect -a ../ATAC-seq/analyses/outsidepeaks.sigmoid_colon.bed -b  H3K4peaks/ENCFF724ZOF.bed -u > H3K4peaks/sigmoidH3K4out.bed

bedtools intersect -a ../ATAC-seq/analyses/outsidepeaks.stomach.bed -b H3K4peaks/ENCFF844XRN.bed -u > H3K4peaks/stomachH3K4out.bed


### intersect the output with the other histone mark, in this case H3K27

bedtools intersect -a H3K4peaks/sigmoidH3K4out.bed -b H3K27peaks/ENCFF872UHN.bed -u > candidates_sigmoid_colon.bed

bedtools intersect -a H3K4peaks/stomachH3K4out.bed -b H3K27peaks/ENCFF977LBD.bed -u > candidates_stomach.bed

wc -l candidates*
  14215 candidates_colon.bed
   8022 candidates_stomach.bed
  22237 total

### there is a total of 22237 candidates, 14215 for colon and 8022 for stomach


# Task 3:  
## Focus on regulatory elements that are located on chromosome 1 (hint: to parse a file based on the value of a specific column, have a look at what we did here), and generate a file regulatory.elements.starts.tsv that contains the name of the regulatory region (i.e. the name of the original ATAC-seq peak) and the start (5') coordinate of the region.


cut -f2 ../ATAC-seq/analyses/bigBed.peaks.ids.txt |
while read tissue; do
grep -w chr1 candidates_$tissue.bed | awk 'BEGIN{FS=OFS="\t"}$1=="chr1"{print $4, $2}' > $tissue.regulatory.elements.starts.tsv
done


wc -l *elements.starts.tsv
 1521 sigmoid_colon.regulatory.elements.starts.tsv
  987 stomach.regulatory.elements.starts.tsv
 2508 total


# Task 4: 
## Focus on protein-coding genes located on chromosome 1. From the BED file of gene body coordinates that you generated here, prepare a tab-separated file called gene.starts.tsv which will store the name of the gene in the first column, and the start coordinate of the gene on the second column (REMEMBER: for genes located on the minus strand, the start coordinate will be at the 3'). Use the command below as a starting point:

grep -w chr1 ../chip-seq/annotation/gencode.v24.protein.coding.gene.body.bed | awk 'BEGIN{FS=OFS="\t"}{if ($6=="+"){start=$2} else {start=$3}; print $4, start}' >gene.starts.tsv

# Task 5: 
## Download or copy this python script inside the epigenomics_uvic/bin folder. Have a look at the help page of this script to understand how it works:
python ../bin/get.distance.py -h
### This script takes as input two distinct arguments: 1) --input corresponds to the file gene.starts.tsv (i.e. the file you generated in Task #4); 2) --start corresponds to the 5' coordinate of a regulatory element. Complete the python script so that for a given coordinate --start the script returns the closest gene, the start of the gene and the distance of the regulatory element.

### To make sure your script is working fine, run the following command:

### python ../bin/get.distance.py --input gene.starts.tsv --start 980000
### You should be getting this result:

### ENSG00000187642.9	982093 2093



### First download the code
wget -P ../bin "https://public-docs.crg.es/rguigo/Data/bborsari/UVIC/epigenomics_course/get.distance.py"

### the code was modified, the use of with to open the file was integrated, inside of this is a for loop and an if statement to select the correct gene


#************
# LIBRARIES *
#************

import sys
from optparse import OptionParser

#*****************
# OPTION PARSING *
#*****************

parser = OptionParser()
parser.add_option("-i", "--input", dest="input_file")
parser.add_option("-s", "--start", dest="start_position")
options, args = parser.parse_args()

#********
# BEGIN *
#********

with open(options.input_file, 'r') as input_file:
    enhancer_start = int(options.start_position)
    min_distance = 1000000
    selected_gene = ""
    selected_start = 0

    # Iterate through each line in the input file
    for line in input_file:
        gene, gene_start = line.strip().split('\t')
        gene_start = int(gene_start)
        distance = abs(gene_start - enhancer_start)

        # Update selected gene if the distance is smaller
        if distance < min_distance:
            min_distance = distance
            selected_gene = gene
            selected_start = gene_start

    # Print the selected gene and its start position
    print("\t".join([selected_gene, str(selected_start), str(min_distance)]))



python ../bin/get.distance.py --input gene.starts.tsv --start 980000
ENSG00000187642.9       982093  2093


# Task 6:
## For each regulatory element contained in the file regulatory.elements.starts.tsv, retrieve the closest gene and the distance to the closest gene using the python script you created above. Use the command below as a starting point:

cat regulatory.elements.starts.tsv | while read element start; do 
   python ../bin/get.distance.py ... # to be completed by you; 
done > regulatoryElements.genes.distances.tsv



for tissue in stomach sigmoid_colon; do
  cat regulatory.elements.starts_"$tissue".tsv |  while read element start; do 
   python ../bin/get.distance.py -i gene.starts.tsv --start "$start"; 
done > regulatory.genes."$tissue".tsv

for tissue in stomach sigmoid_colon; do
cat $tissue.regulatory.elements.starts.tsv| while read element start; do
   python ../bin/get.distance.py --input gene.starts.tsv --start $start
done > $tissue.regulatoryElements.genes.distances.tsv
done

cut -f2 ../chip-seq/analyses/bigBed.peaks.ids.txt | while read tissue; do cat $tissue.regulatory.elements.starts.tsv| while read element start; do    python ../bin/get.distance.py --input gene.starts.tsv --start $start; done > $tissue.regElements.genes.distances.tsv; done

wc -l *regElements.genes.distances.tsv
 1521 sigmoid_colon.regElements.genes.distances.tsv
  987 stomach.regElements.genes.distances.tsv
 2508 total



# Task 7: 
## Use R to compute the mean and the median of the distances stored in regulatoryElements.genes.distances.tsv. 

R
sigmoid<-read.csv("sigmoid_colon.regElements.genes.distances.tsv", header=F, sep="")
distsigmoid<-as.vector(unlist(sigmoid[3]))

mean(distsigmoid, na.rm=TRUE)
[1] 73026.44

median(distancesigmoid, na.rm=TRUE)
[1] 35768


stomach<-read.csv("stomach.regElements.genes.distances.tsv", header=F, sep="")

mean(distStomach)
[1] 45227.05

> median(distStomach)
[1] 27735











